const { cmd } = require('../command');

cmd({
    pattern: "happy",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üòÇ",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üòÇ' });
        const emojiMessages = [
            "üòÉ", "üòÑ", "üòÅ", "üòä", "üòé", "ü•≥",
            "üò∏", "üòπ", "üåû", "üåà", "üòÉ", "üòÑ",
            "üòÅ", "üòä", "üòé", "ü•≥", "üò∏", "üòπ",
            "üåû", "üåà", "üòÉ", "üòÑ", "üòÅ", "üòä"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "heart",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "‚ù§Ô∏è",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üñ§' });
        const emojiMessages = [
            "üíñ", "üíó", "üíï", "ü©∑", "üíõ", "üíö",
            "ü©µ", "üíô", "üíú", "üñ§", "ü©∂", "ü§ç",
            "ü§é", "‚ù§Ô∏è‚Äçüî•", "üíû", "üíì", "üíò", "üíù",
            "‚ô•Ô∏è", "üíü", "‚ù§Ô∏è‚Äçü©π", "‚ù§Ô∏è"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "angry",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "ü§°",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üëΩ' });
        const emojiMessages = [
            "üò°", "üò†", "ü§¨", "üò§", "üòæ", "üò°",
            "üò†", "ü§¨", "üò§", "üòæ"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "sad",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üò∂",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üòî' });
        const emojiMessages = [
            "ü•∫", "üòü", "üòï", "üòñ", "üò´", "üôÅ",
            "üò©", "üò•", "üòì", "üò™", "üò¢", "üòî",
            "üòû", "üò≠", "üíî", "üò≠", "üòø"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "shy",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üßê",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üßê' });
        const emojiMessages = [
            "üò≥", "üòä", "üò∂", "üôà", "üôä",
            "üò≥", "üòä", "üò∂", "üôà", "üôä"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "moon",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üåö",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üåù' });
        const emojiMessages = [
            "üåó", "üåò", "üåë", "üåí", "üåì", "üåî",
            "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí",
            "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò",
            "üåë", "üåí", "üåì", "üåî", "üåï", "üåñ",
            "üåó", "üåò", "üåë", "üåí", "üåì", "üåî",
            "üåï", "üåñ", "üåùüåö"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "confused",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "ü§î",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'ü§î' });
        const emojiMessages = [
            "üòï", "üòü", "üòµ", "ü§î", "üòñ", 
            "üò≤", "üò¶", "ü§∑", "ü§∑‚Äç‚ôÇÔ∏è", "ü§∑‚Äç‚ôÄÔ∏è"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "hot",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üíã",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üíã' });
        const emojiMessages = [
            "ü•µ", "‚ù§Ô∏è", "üíã", "üò´", "ü§§", 
            "üòã", "ü•µ", "ü•∂", "üôä", "üòª", 
            "üôà", "üíã", "ü´Ç", "ü´Ä", "üëÖ", 
            "üëÑ", "üíã"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "nikal",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üóø",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        let loadingMessage;
        for (let i = 0; i < 3; i++) { // Try sending message up to 3 times
            loadingMessage = await conn.sendMessage(from, { text: 'SHABAN-MD' });
            if (loadingMessage.key) break;
            await new Promise(resolve => setTimeout(resolve, 500)); // Wait and retry
        }

        if (!loadingMessage?.key) {
            return reply("‚ùå *Error:* Message key not found, try again.");
        }

        // ASCII Art Messages
        const asciiMessages = [
            "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä...",
            "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä...",
            "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä..."
        ];

        // Send ASCII animations with retry
        for (const asciiMessage of asciiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay increased
            let success = false;
            
            for (let i = 0; i < 3; i++) { // Try editing up to 3 times
                try {
                    await conn.relayMessage(
                        from,
                        {
                            protocolMessage: {
                                key: loadingMessage.key,
                                type: 14,
                                editedMessage: {
                                    conversation: asciiMessage,
                                },
                            },
                        },
                        {}
                    );
                    success = true;
                    break;
                } catch (error) {
                    console.log(`Retry ${i + 1}: ${error.message}`);
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            }

            if (!success) reply("‚ùå *Error:* Message edit failed.");
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});